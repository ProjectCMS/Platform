!function ($) {
    "use strict";

    var App = function () {
        },
        $self;

    App.prototype.initEditor       = function () {
        tinymce.init(
            {
                selector: '.textarea',
                skin: 'custom',
                branding: false,
                menubar: false,
                content_css: ['/Themes/fonik/assets/css/theme.css'],
                language: 'pt_BR',
                entity_encoding: "raw",
                plugins: [
                    "advlist autolink link image lists charmap print preview hr anchor pagebreak",
                    "searchreplace visualblocks visualchars fullscreen insertdatetime media nonbreaking",
                    "table directionality emoticons template textcolor paste textcolor colorpicker textpattern autoresize imagetools code"
                ],
                toolbar1: 'manager bold italic strikethrough numlist bullist blockquote hr alignleft aligncenter alignright link unlink image media',
                toolbar2: 'formatselect underline alignjustify forecolor paste searchreplace removeformat charmap outdent indent undo redo print fullscreen code',

                // Upload files
                relative_urls: false,
                remove_script_host: false,

                setup: function (editor) {
                    editor.addButton('manager', {
                        text: 'Adicionar Mídia',
                        icon: 'browse',
                        tooltip: 'Adicionar Mídia',
                        shortcut: "Ctrl+E",
                        onclick: $self.modalEditor
                    }),

                        editor.addShortcut("Ctrl+E", "", $self.modalEditor), editor.addMenuItem("manager", {
                        text: 'Adicionar Mídia',
                        icon: 'browse',
                        tooltip: 'Adicionar Mídia',
                        onclick: $self.modalEditor,
                        context: "insert"
                    });
                },

                file_picker_callback: function (callback, value, meta) {
                    $self.modalEditor('insert', callback, value, meta);
                }

            });
    }
    App.prototype.initAjaxAciton   = function () {
        $(".ajax-action").on("click", function (e) {

            e.preventDefault();

            var c      = confirm('Deseja mesmo executar essa ação?'),
                method = $(this).data('method') ? $(this).data('method') : 'post',
                url    = $(this).attr("href"),
                data   = $(this).data();

            if (c == true) {
                $.post(
                    {
                        url: url,
                        method: method,
                        headers: {'X-CSRF-TOKEN': app.token}
                    }, data, function (data) {
                        location.reload();
                    });
            }
        });
    }
    App.prototype.initAjaxModules  = function () {
        $(".ajax-module").on("click", function (e) {

            e.preventDefault();

            var $this  = $(this),
                status = $(this).is(":checked"),
                module = $(this).val(),
                url    = $(this).closest('table').data("href");

            $.post({
                       url: url,
                       headers: {'X-CSRF-TOKEN': app.token}
                   }, {status: status, module: module}, function (data) {

                if (data.status == false && status == false) {
                    $this.prop('checked', true);
                    alert(data.msg);
                } else {
                    location.reload();
                }
            });
        });
    }
    App.prototype.initCustomTable  = function () {
        var table = $('.table');

        $.each(table.find('th[data-sort]'), function (index, val) {

            var object = $self.parseParamns($self.request),
                data   = $(this).data();

            if (!$(this).attr('data-order')) {
                $(this).attr('data-order', '');
            }

            if (data.sort == object.sort) {
                $(this).attr('data-order', object.order);
            }
        });

        table.on('click', 'th[data-sort]', function (e) {

            var sort     = $(this).attr('data-sort'),
                order    = $(this).attr('data-order') ? $(this).attr('data-order') : 'desc',
                newOrder = (order === 'desc' ? 'asc' : 'desc'),
                object   = $self.parseParamns($self.request);

            $(this).attr('data-order', newOrder);

            object.order = newOrder;
            object.sort  = sort;

            delete object.page;

            location.href = '?' + $.param(object);

            e.preventDefault();
        });
    }
    App.prototype.initGrid         = function () {

        var grid        = $self.grid,
            imagesInput = $self.imagesInput,
            ordering    = $self.ordering,
            order       = $self.order;

        imagesInput.find('option').attr('selected', 'selected');

        grid.on('click', '.item .delete-image', function (e) {
            var image = $(this).closest('.item').data('image');
            $(this).closest('.item').remove();
            imagesInput.find('option[value="' + image + '"]').remove();
        });

        $(window).on("resize load", function () {
            var w = $('body').width();
            if (w >= 1920) {
                grid.attr('data-columns', 10);
            } else if (w >= 1680 && w < 1920) {
                grid.attr('data-columns', 6);
            } else if (w >= 1480 && w < 1680) {
                grid.attr('data-columns', 5);
            } else if (w >= 1280 && w < 1460) {
                grid.attr('data-columns', 4);
            } else if (w >= 1080 && w < 1280) {
                grid.attr('data-columns', 3);
            } else if (w >= 880 && w < 1080) {
                grid.attr('data-columns', 2);
            } else {
                grid.attr('data-columns', 1);
            }
        });

        grid.sortable(
            {
                items: "> .sortable",
                update: function (event, ui) {
                    ordering.removeClass('disabled');
                    order = $(this).sortable('toArray');
                }
            });
        grid.disableSelection();

        ordering.on("click", function (e) {

            var url = $(this).attr("href");
            $.post({
                       url: url,
                       headers: {'X-CSRF-TOKEN': app.token},
                       method: 'put'
                   }, {order: order}, function () {
                ordering.addClass('disabled');
                alert("Ordenação alterada");
            });

            e.preventDefault();

        });
    }
    App.prototype.initCheckbox     = function () {
        $('[data-check="all"]').on("click", function () {
            $('[data-check="single"]').not(this).prop('checked', this.checked);
        });
    }
    App.prototype.parseParamns     = function (str) {
        if (str) {
            return str.split('&').reduce(function (params, param) {
                var paramSplit        = param.split('=').map(function (value) {
                    return decodeURIComponent(value.replace(/\+/g, ' '));
                });
                params[paramSplit[0]] = paramSplit[1];
                return params;
            }, {});
        } else {
            return {};
        }
    }
    App.prototype.imageOrientation = function (src) {
        var orientation,
            img = new Image();

        img.src = src;

        if (img.naturalWidth > img.naturalHeight) {
            orientation = 'landscape';
        } else if (img.naturalWidth < img.naturalHeight) {
            orientation = 'portrait';
        } else {
            orientation = 'even';
        }

        return orientation;
    }
    App.prototype.modalEditor      = function (type, callback, value, meta) {
        if (type == 'insert') {

            $(this).manager(
                {
                    manager: app.urlManager,
                    tools: true,
                    multiple: false,
                    dataFile: value,
                    data: {type: meta.filetype},
                    complete: function (data) {
                        if (data.length) {
                            $.each(data, function (index, val) {
                                callback(val.url);
                            });
                        }
                    }
                });

        } else {

            $(this).manager(
                {
                    manager: app.urlManager,
                    tools: true,
                    multiple: true,
                    complete: function (data) {
                        if (data.length) {
                            $.each(data, function (index, val) {
                                tinymce.activeEditor.execCommand('mceInsertContent', false, val.html);
                            });
                        }
                    }
                });
        }
    }
    App.prototype.nl2br            = function (varTest) {
        if (varTest)
            return varTest.replace(/(\r\n|\n\r|\r|\n)/g, "<p>");
    }
    App.prototype.br2nl            = function (varTest) {
        if (varTest)
            return varTest.replace(/<br>/g, "\r");
    }
    App.prototype.init             = function () {

        $(".textarea").val(this.br2nl($(".textarea").val()));
        $(".textarea").val(this.nl2br($(".textarea").val()));

        $self = this;

        this.grid        = $(".grid");
        this.ordering    = $('.ordering');
        this.order       = [];
        this.imagesInput = $(".images-input");
        this.request     = app.request.replace(/&amp;/g, '&');

        this.initEditor();
        this.initAjaxAciton();
        this.initAjaxModules();
        this.initCustomTable();
        this.initGrid();
        this.initCheckbox();
    }

    //init
    $.App = new App, $.App.Constructor = App
}(window.jQuery),

    //initializing
    function ($) {
        "use strict";
        $.App.init();
    }(window.jQuery);
var listPDF  = $(".grid"),
    pdfjsLib = window['pdfjs-dist/build/pdf'];
!function ($) {
    "use strict";
    var Magazine = function () {
        },
        $self,
        $app;

    Magazine.prototype.initImageManager = function () {
        $('.manager-pdf').on("click", function (e) {
            e.preventDefault();
            $(this).manager(
                {
                    manager: manager,
                    tools: true,
                    multiple: false,
                    url: 'revistas',
                    complete: function (data) {
                        var storage = data[0].storage;

                        $.post({
                                   url: urlMagazine,
                                   headers: {'X-CSRF-TOKEN': app.token}
                               }, {storage: storage}, function (data) {

                            $app.initGrid();

                            $.each(data, function (index, value) {
                                pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';
                                $self.pngToPDF(index, value);
                            });

                        });

                        // swal({
                        //          title: 'Auto close alert!',
                        //          text: 'I will close in 5 seconds.',
                        //          onOpen: function () {
                        //              swal.showLoading();
                        //          }
                        //      });
                    }
                }
            );
        });
    }
    Magazine.prototype.pngToPDF         = function (index, url) {
        var loadingTask = pdfjsLib.getDocument(url.url),
            list        = $app.grid.append('<div class="item sortable" id="' + index + '">' +
                '<div class="pdf-content">\n' +
                '<div class="load"><i class="fa fa-circle-o-notch fa-spin fa-fw"></i>\n' +
                '<span>Carregando...</span></div>' +
                '</div>' +
                '</div>');

        loadingTask.promise.then(function (pdf) {

            // Fetch the first page
            var pageNumber = 1;
            pdf.getPage(pageNumber).then(function (page) {

                var viewport  = page.getViewport(1),
                    canvas    = document.createElement('canvas'),
                    context   = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width  = viewport.width;

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };

                page.render(renderContext).then(function () {
                    var content = list.find('#' + index + ' .pdf-content');
                    content.append('<img src="' + canvas.toDataURL('image/jpeg', 1.0) + '">');
                });

            });
        }, function (reason) {
            console.error(reason);
        });
    }
    Magazine.prototype.init             = function () {

        $self = this;
        $app  = $.App;

        this.initImageManager();
    }

    //init
    $.Magazine = new Magazine, $.Magazine.Constructor = Magazine
}
(window.jQuery),

    //initializing
    function ($) {
        "use strict";
        $.Magazine.init();
    }(window.jQuery);


(function ($) {

    $.fn.manager = function (options) {

        var base      = this;
        var serialize = {};

        var settings = $.extend(
            {
                complete: function () {
                },
                multiple: false,
                tools: false,
                manager: '',
                url: '',
                data: '',
                dataFile: '',
            }, options);

        var $selector = $("body");

        this.each(function () {

            serialize = {
                url: (settings.url ? btoa(settings.url) : ''),
                tools: settings.tools,
                dataFile: settings.dataFile,
                multiple: (!settings.file ? settings.multiple : false),
            };

            serialize = $.extend(settings.data, serialize);

            $.get(manager, serialize, function (data) {

                var $manager = document.createElement('div');
                var $rand    = Math.floor(Math.random() * (999999 - 0)) + 0;
                var $content = "content-manager-" + $rand;

                $manager.setAttribute("id", $content);

                $($selector).children("#" + $content).remove();
                $($selector).append($manager);
                $($selector).children("#" + $content).append(data);

                //****** Abrir a modal ******//
                abrir_modal($content);

                //****** Fechar a modal ******//
                fechar_modal($content);

                //****** Selecionar os arquivos ******//
                selecionar_arquivos($content);

            });
        });

        abrir_modal = function ($content) {
            $($selector).find('#' + $content).css('position', 'relative');
            $($selector).find('#' + $content).css('z-index', '999999999');
            $($selector).find('#' + $content).find('.modal-manager').modal({
                                                                               show: true
                                                                           });
            $($selector).find('#' + $content).find('.manager ul li').removeClass('selected');
        }

        fechar_modal = function ($content) {
            $($selector).find('#' + $content).find('.modal-manager').on('hide.bs.modal', function (event) {
                $($selector).children('#' + $content).remove();
            });
        }

        selecionar_arquivos = function ($content) {
            $($selector).children('#' + $content).find('iframe').on("load", function () {
                var $this      = $(this).contents(),
                    btn_insert = $this.find('#insert-item');

                btn_insert.on("click", function () {

                    var val  = [];
                    var item = [];

                    $this.find('.check-item:checkbox:checked').each(function (i, value) {
                        val[i]  = atob($(this).val());
                        item[i] = $(this).closest('.item').data();
                    });

                    if (item) {

                        var data = [];

                        $.each(item, function (index, value) {

                            if (value.type != 'folder') {
                                switch (value.type) {
                                    case 'text':
                                    case 'application':
                                        value.html = '<a href="' + value.url + '">' + value.file + '</a>';
                                        break;
                                    case 'image':
                                        value.html = '<img src="' + value.url + '">';
                                        break;
                                    case 'audio':
                                        value.html = '<audio controls><source src="' + value.url + '"></audio >';
                                        break;
                                    case 'video':
                                        value.html = '<video controls><source src="' + value.url + '"></video>';
                                        break;
                                }

                                value.path = atob(value.path);

                                data[index] = value;
                            }
                        });

                        if ($.isFunction(settings.complete)) {
                            settings.complete.call(base, data);
                        }

                        $($selector).find('#' + $content).find('.modal-manager').modal('hide');
                    }
                });

            });
        }

    }

})(jQuery);

!function ($) {
    "use strict";
    var Menus     = function () {
        },
        $self,
        $app,
        dd        = $('.dd'),
        menuItems = $('.menu-items'),
        $menu     = [];

    Menus.prototype.initManagerMenu = function () {

        var btn     = $('.add-item-menu'),
            btnLink = $('.add-item-menu-link');

        // Adicionar itens de categoria e páginas
        btn.on('click', function (e) {

            e.preventDefault();

            var checks = $('.parent-menu').find('[type="checkbox"]:checked'),
                tmp    = [];

            if (checks.length >= 1) {

                //btn.prop('disabled', true);

                $.each(checks, function (index, val) {

                    var type = $(this).closest('.parent-menu').data('type'),
                        json = {model_type: type, item: $(this).val()};

                    tmp.push(json);
                });

                $self.postMenu(tmp, true, function (data) {
                    checks.prop('checked', false);
                    btn.prop('disabled', false);
                    dd.find('#dd-main').append(data);
                    $self.getNestableMenu();
                });
            }

        });

        btnLink.on('click', function (e) {

            e.preventDefault();

            var items   = $('.parent-link').find('input'),
                tmp     = [],
                $return = false;

            $.each(items, function (index, val) {
                var dataLink = $(this).data('link'),
                    value    = $(this).val();

                if (dataLink == 'url' && $self.checkUrl(value) == false) {
                    alert("URL digitada é inválida!");
                    $return = false;
                    return false;
                } else if (value == '') {
                    alert("Preencha todos os campos do link personalizado!");
                    $return = false;
                    return false;
                } else {
                    $return       = true;
                    tmp[dataLink] = value;
                }

            });

            tmp = $.extend({}, tmp);

            if ($return) {
                $self.postMenu(tmp, false, function (data) {
                    dd.find('#dd-main').append(data);
                    $self.getNestableMenu();
                    items.val('');
                });
            }

        });

    }

    Menus.prototype.postMenu = function (tmp, array, callback) {

        var serialize;

        if (array == true) {
            serialize = {items: tmp};
        } else {
            serialize = tmp;
        }

        $.post({
                   url: app.urlMenuItem,
                   headers: {'X-CSRF-TOKEN': app.token}
               }, serialize, function (data) {
            callback(data);

        });

    }

    Menus.prototype.getNestableMenu = function () {

        var serialize = dd.nestable('toArray'),
            tmp       = [];

        if (serialize.length) {
            $.each(serialize, function (index, val) {

                var item    = dd.find('.dd-item').filter('[data-id="' + val.id + '"]'),
                    inputs  = item.find('#cl-' + val.id + ' input'),
                    objects = [];

                val.elements = [];

                $.each(inputs, function () {
                    var dataLink = $(this).data('link'),
                        value    = $(this).val();

                    var obj       = {};
                    obj[dataLink] = value;

                    objects = $.extend(objects, obj);
                });

                objects      = $.extend({}, objects);
                val.elements = objects;

                tmp.push(val);
            });

            menuItems.val(JSON.stringify(tmp));
        }

    }

    Menus.prototype.checkUrl = function (url) {
        var regex = /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
        if (!regex.test(url)) {
            return false;
        } else {
            return true;
        }
    }

    Menus.prototype.removeItem = function () {
        var remove = $('.remove-item');

        remove.on('click', function (e) {

            e.preventDefault();

            var elem = $(this).closest('.dd-item');

            elem.remove();

            $self.getNestableMenu();

        });

    }

    Menus.prototype.setMenu = function () {
        var select = $('.set-menu'),
            url    = select.closest('.form').data('url'),
            btn    = select.closest('.form').find('.btn');

        btn.on('click', function () {
            var val = select.val();
            if (val != '') {
                location.href = url + '/' + val;
            }
        });
    }

    Menus.prototype.getInputValue = function () {
        var input = dd.find('input');
        input.on('keyup', function () {
            $self.getNestableMenu();
        });
    }

    Menus.prototype.initNestableMenu = function () {
        dd.nestable(
            {
                callback: function () {
                    $self.getNestableMenu();
                }
            });

    }

    Menus.prototype.init = function () {

        $self = this;
        $app  = $.App;

        this.initManagerMenu();
        this.initNestableMenu();
        this.getNestableMenu();
        this.removeItem();
        this.setMenu();
        this.getInputValue();
    }

    //init
    $.Menus = new Menus, $.Menus.Constructor = Menus
}(window.jQuery),

    //initializing
    function ($) {
        "use strict";
        $.Menus.init();
    }(window.jQuery);

var tags        = $('.tags'),
    tagList     = tags.find('li'),
    tagSelect   = $('.tag-select'),
    tagInput    = $('.tag-input'),
    tagsData    = $('[data-tags]'),
    tagBtn      = $('.insert-tag'),
    tagsJson    = [];

!function ($) {
    "use strict";
    var Posts = function () {
        },
        $self,
        $app;

    Posts.prototype.initTags = function () {
        $.each(tagList, function (index) {
            var $this = $(this);
            $self.pushTags($this.data('name'));
        });

        tagBtn.on('click', function () {
            if (tagInput.val() != '') {
                $.each($self.split(tagInput.val()), function (index, value) {
                    if (tagsJson.indexOf(value) === -1 && value != '') {
                        $self.pushTags(value, true);
                    }
                });
                tagInput.val('');
            }
        });

        tags.on('click', 'li span', function () {
            var li   = $(this).closest('li'),
                name = li.data('name');

            tagsJson.splice(tagsJson.indexOf(name), 1)

            li.remove();
            tagSelect.find('option[value="' + name + '"]').remove();
        });

        tagInput.on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB &&
                $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
        }).autocomplete(
            {
                minLength: 0,
                maxResults: 10,
                source: function (request, response) {
                    var results = $.ui.autocomplete.filter(tagsData.data('tags'), $self.extractLast(request.term));
                    response(results.slice(0, this.options.maxResults));

                },
                focus: function () {
                    return false;
                },
                select: function (event, ui) {
                    var terms = $self.split(this.value);
                    terms.pop();
                    terms.push(ui.item.value);
                    terms.push("");
                    this.value = terms.join(", ");
                    return false;
                }
            });
    }

    Posts.prototype.initFileManager = function () {
        $('.manager-image').on("click", function (e) {
            e.preventDefault();

            $(this).manager(
                {
                    manager: manager,
                    tools: true,
                    multiple: true,
                    data: {type: 'image'},
                    complete: function (data) {
                        if (data.length) {
                            $.each(data, function (index, val) {
                                var orientation = $app.imageOrientation(val.url);
                                $app.imagesInput.append('<option value="' + val.path + '" selected>' + val.path + '</option>');
                                $app.grid.append('<div class="item new"><img src="' + val.url + '" data-orientation="' + orientation + '"></div>');
                            });
                        }
                    }
                }
            );
        });
    }

    Posts.prototype.pushTags = function (name, push_li) {
        if (push_li == true) {
            tags.append('<li class="list-inline-item" data-name="' + name + '"><span></span>' + name + '</li>');
        }
        tagSelect.append('<option value="' + name + '" selected>' + name + '</option>');
        tagsJson.push(name);
    }

    Posts.prototype.split = function (val) {
        return val.split(/,\s*/);
    }

    Posts.prototype.extractLast = function (term) {
        return $self.split(term).pop();
    }

    Posts.prototype.init = function () {

        $self = this;
        $app  = $.App;

        this.initTags();
        this.initFileManager();

    }

    //init
    $.Posts = new Posts, $.Posts.Constructor = Posts
}(window.jQuery),

    //initializing
    function ($) {
        "use strict";
        $.Posts.init();
    }(window.jQuery);





